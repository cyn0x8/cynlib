import haxe.ds.StringMap;

import flixel.FlxG;

import funkin.modding.base.ScriptedMusicBeatState;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.play.PlayState;

typedef ReloadData = {
	callback:Null<String>,
	variables:Null<()->StringMap>
}

class CL_Reloader extends ScriptedModule {
	public function new() {
		super("CL_Reloader", -2147483648);
	}
	
	public var targetState:String = null;
	
	public var reloadPre:StringMap<ReloadData> = new StringMap();
	public var reloadPost:StringMap<ReloadData> = new StringMap();
	
	private var reload:(StringMap<ReloadData>)->Void = function(reloadData:StringMap<ReloadData>):Void {
		reloadData = reloadData.copy();
		for (module in reloadData.keys()) {
			trace("cynlib: reloading module \"" + module + "\"");
			
			var data:ReloadData = reloadData.get(module);
			if (data.variables != null) {
				var variables:StringMap = data.variables();
				for (key in variables.keys()) {
					ModuleHandler.getModule(module).scriptSet(key, variables.get(key));
				}
			}
			
			if (data.callback != null) {
				ModuleHandler.getModule(module).scriptCall(data.callback);
			}
		}
	}
	
	private var pressedReload:Bool = false;
	override public function onUpdate(event:UpdateScriptEvent):Void {
		pressedReload = FlxG.keys.justPressed.F5;
	}
	
	override public function onDestroy(event:ScriptEvent):Void {
		if (
			(PlayState.instance != null && PlayState.instance.criticalFailure) ||
			(!FlxG.keys.justPressed.F5 && !pressedReload)
		) {
			return;
		}
		
		FlxG.signals.preStateSwitch.addOnce(function():Void {
			reload(reloadPre);
			
			trace("cynlib: pre switch reload complete");
		});
		
		FlxG.signals.postStateSwitch.addOnce(function():Void {
			reload(reloadPost);
			
			trace("cynlib: post switch reload complete");
			
			if (targetState != null) {
				trace("cynlib: switching to target state \"" + targetState + "\"");
				
				FlxG.switchState(ScriptedMusicBeatState.init(targetState));
			}
		});
	}
}