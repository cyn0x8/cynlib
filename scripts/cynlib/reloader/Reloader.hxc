package cynlib.reloader;

import haxe.ds.StringMap;

import thx.Types;

import flixel.FlxG;

import funkin.modding.base.ScriptedMusicBeatState;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.play.PlayState;

typedef ReloadData = {
	priority:Null<Int>,
	callback:Null<String>,
	variables:Null<()->StringMap>
}

class Reloader extends ScriptedModule {
	public function new() {
		super("cynlib.reloader.Reloader", -2147483648);
	}
	
	public var targetState:Null<String> = null;
	
	public var reloadPre:StringMap<ReloadData> = new StringMap();
	public var reloadPost:StringMap<ReloadData> = new StringMap();
	
	private var reload:(StringMap<ReloadData>)->Void = function(reloadData:StringMap<ReloadData>):Void {
		reloadData = reloadData.copy();
		
		var sorted:Array<String> = new Array();
		for (module in reloadData.keys()) {
			if (Types.isAnonymousObject(reloadData.get(module))) {
				sorted.push(module);
			}
		}
		
		sorted.sort(function(a:String, b:String):Int {
			var aData:ReloadData = reloadData.get(a);
			var bData:ReloadData = reloadData.get(b);
			
			if (aData.priority == null && bData.priority == null) {
				return 0;
			} else if (aData.priority == null) {
				return 1;
			} else if (bData.priority == null) {
				return -1;
			}
			
			return aData.priority > bData.priority ? 1 : -1;
		});
		
		for (i in 0 ... sorted.length) {
			var module:String = sorted[i];
			
			trace("cynlib: reloading module \"" + module + "\"");
			
			var data:ReloadData = reloadData.get(module);
			if (data.variables != null) {
				var variables:StringMap<Dynamic> = data.variables();
				for (key in variables.keys()) {
					ModuleHandler.getModule(module).scriptSet(key, variables.get(key));
				}
			}
			
			if (data.callback != null) {
				ModuleHandler.getModule(module).scriptCall(data.callback);
			}
		}
	}
	
	private var pressedReload:Bool = false;
	override public function onUpdate(event:UpdateScriptEvent):Void {
		pressedReload = FlxG.keys.justPressed.F5;
	}
	
	override public function onDestroy(event:ScriptEvent):Void {
		if (
			(PlayState.instance != null && PlayState.instance.criticalFailure) ||
			(!FlxG.keys.justPressed.F5 && !pressedReload)
		) {
			return;
		}
		
		FlxG.signals.preStateSwitch.addOnce(function():Void {
			reload(reloadPre);
			
			trace("cynlib: pre switch reload complete");
		});
		
		FlxG.signals.postStateSwitch.addOnce(function():Void {
			reload(reloadPost);
			
			trace("cynlib: post switch reload complete");
			
			if (targetState != null) {
				trace("cynlib: switching to target state \"" + targetState + "\"");
				
				FlxG.switchState(ScriptedMusicBeatState.init(targetState));
			}
		});
	}
}