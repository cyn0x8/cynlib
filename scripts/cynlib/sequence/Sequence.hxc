package cynlib.sequence;

import flixel.util.FlxTimer;

import funkin.modding.module.ScriptedModule;

/**
 * An object representing a timed event.
 */
typedef SequenceEvent = {
	/**
	 * The time in seconds at which the event should occur (not considering `mult`).
	 */
	time:Float,
	
	/**
	 * The function to call when the event occurs.
	 */
	callback:()->Void
}

/**
 * An object representing a timed sequence of events using `FlxTimer`s.
 */
typedef Sequence = {
	timers:Array<FlxTimer>,
	
	running:Bool,
	
	/**
	 * Gets whether the sequence is currently running.
	 */
	get_running:()->Bool,
	
	/**
	 * Pauses or resumes the sequence.
	 * 
	 * @param v	Whether the sequence should be running.
	 * @return Whether the sequence is running.
	 */
	set_running:(Bool)->Bool,
	
	/**
	 * Gets whether the sequence has completed or been destroyed.
	 */
	completed:()->Bool,
	
	exists:Bool,
	
	/**
	 * Destroys the sequence and all of its timers.
	 */
	destroy:()->Void
}

/**
 * Module for creating `Sequence` objects based on `FlxTimer`s.
 */
class Sequence extends ScriptedModule {
	public function new() {
		super("cynlib.sequence.Sequence", -2147483648);
	}
	
	/**
	 * Creates a new `Sequence` object.
	 * 
	 * @param events The events to occur in the sequence.
	 * @param mult The multiplier for the time of each event.
	 * @param start Whether the sequence should start running immediately.
	 */
	public function new_Sequence(events:Array<SequenceEvent>, mult:Float = 1, start:Bool = true):Sequence {
		var obj:Dynamic = {
			timers: new Array(),
			
			running: true,
			
			exists: true
		};
		
		obj.get_running = function():Bool {
			return obj.exists && obj.running && !obj.completed();
		};
		
		obj.set_running = function(v:Bool):Bool {
			if (!obj.exists) {
				obj.running = false;
				return false;
			}
			
			for (timer in obj.timers) {
				timer.active = v;
			}
			
			return obj.running = v;
		};
		
		obj.completed = function():Bool {
			if (!obj.exists) {
				return true;
			}
			
			var completed:Bool = obj.timers.length == 0;
			if (completed) {
				obj.running = false;
			}
			
			return completed;
		};
		
		obj.destroy = function():Void {
			if (!obj.exists) {
				return;
			}
			
			while (!obj.completed()) {
				var timer:FlxTimer = obj.timers.pop();
				timer.cancel();
				timer.destroy();
			}
			
			obj.running = false;
			
			toDestroy.remove(obj.destroy);
			
			obj.exists = false;
		};
		
		for (event in events) {
			obj.timers.push(new FlxTimer().start(
				event.time * mult,
				function(timer:FlxTimer):Void {
					event.callback();
					obj.timers.remove(timer);
					
					if (obj.completed()) {
						obj.destroy();
					}
				}
			));
		}
		
		obj.set_running(start);
		
		toDestroy.push(obj.destroy);
		
		return obj;
	}
	
	private var toDestroy:Array<()->Void> = new Array();
	override public function onDestroy(event:ScriptEvent):Void {
		while (toDestroy.length > 0) {
			toDestroy.pop()();
		}
	}
}