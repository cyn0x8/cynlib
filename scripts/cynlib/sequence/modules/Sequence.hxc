import flixel.util.FlxTimer;

import funkin.modding.module.Module;

typedef SequenceEvent = {
	time:Float,
	callback:()->Void
}

typedef Sequence = {
	timers:Array<FlxTimer>,
	
	running:Bool,
	get_running:()->Bool,
	set_running:(Bool)->Bool,
	
	completed:()->Bool,
	
	exists:Bool,
	destroy:()->Void
}

class CL_Sequence extends Module {
	public function new() {
		super("CL_Sequence", -2147483648);
	}
	
	public function new_Sequence(events:Array<SequenceEvent>, mult:Float = 1, start:Bool = true):Sequence {
		var obj:Dynamic = {
			timers: new Array(),
			
			running: true,
			
			exists: true
		};
		
		obj.get_running = function():Bool {
			return obj.exists && obj.running && !obj.completed();
		};
		
		obj.set_running = function(v:Bool):Bool {
			if (!obj.exists) {
				obj.running = false;
				return false;
			}
			
			for (timer in obj.timers) {
				timer.active = v;
			}
			
			return obj.running = v;
		};
		
		obj.completed = function():Bool {
			if (!obj.exists) {
				return true;
			}
			
			var completed:Bool = obj.timers.length == 0;
			if (completed) {
				obj.running = false;
			}
			
			return completed;
		};
		
		obj.destroy = function():Void {
			if (!obj.exists) {
				return;
			}
			
			while (!obj.completed()) {
				var timer:FlxTimer = obj.timers.pop();
				timer.cancel();
				timer.destroy();
			}
			
			obj.running = false;
			
			toDestroy.remove(obj.destroy);
			
			obj.exists = false;
		};
		
		for (event in events) {
			obj.timers.push(new FlxTimer().start(
				event.time * mult,
				function(timer:FlxTimer):Void {
					event.callback();
					obj.timers.remove(timer);
				}
			));
		}
		
		obj.set_running(start);
		
		toDestroy.push(obj.destroy);
		
		return obj;
	}
	
	private var toDestroy:Array<()->Void)> = new Array();
	override public function onDestroy(event:ScriptEvent):Void {
		while (toDestroy.length > 0) {
			toDestroy.pop()();
		}
	}
}