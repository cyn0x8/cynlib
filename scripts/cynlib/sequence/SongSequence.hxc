package cynlib.sequence;

import funkin.Conductor;
import funkin.modding.module.ScriptedModule;

/**
 * An object representing a timed event.
 */
typedef SequenceEvent = {
	/**
	 * The time in seconds at which the event should occur (not considering `mult`).
	 */
	time:Float,
	
	/**
	 * The function to call when the event occurs.
	 */
	callback:()->Void
}

/**
 * An object representing a timed sequence of events using `FlxTimer`s.
 */
typedef SongSequence = {
	timers:Array<SequenceEvent>,
	
	startTime:Float,
	
	running:Bool,
	
	/**
	 * Gets whether the sequence is currently running.
	 */
	get_running:()->Bool,
	
	/**
	 * Pauses or resumes the sequence.
	 * 
	 * @param v	Whether the sequence should be running.
	 * @return Whether the sequence is running.
	 */
	set_running:(Bool)->Bool,
	
	/**
	 * Gets whether the sequence has completed or been destroyed.
	 */
	completed:()->Bool,
	
	update:()->Void,
	
	exists:Bool,
	
	/**
	 * Destroys the sequence.
	 */
	destroy:()->Void
}

/**
 * Module for creating `SongSequence` objects based on `Conductor` time.
 */
class SongSequence extends ScriptedModule {
	public function new() {
		super("cynlib.sequence.SongSequence", -2147483648);
	}
	
	/**
	 * Creates a new `SongSequence` object.
	 * 
	 * @param events The events to occur in the sequence.
	 * @param mult The multiplier for the time of each event.
	 * @param start Whether the sequence should start running immediately.
	 */
	public function new_SongSequence(events:Array<SequenceEvent>, mult:Float = 1, start:Bool = true):SongSequence {
		var obj:Dynamic = {
			timers: new Array(),
			
			curTime: Math.NEGATIVE_INFINITY,
			startTime: 0,
			
			running: false,
			
			toRemove: new Array(),
			
			exists: true
		};
		
		obj.get_running = function():Bool {
			return obj.exists && !obj.completed() && obj.running;
		};
		
		obj.set_running = function(v:Bool):Bool {
			if (!obj.exists) {
				obj.running = false;
				return false;
			}
			
			if (v != obj.running) {
				obj.startTime = Conductor.get_instance().songPosition - obj.startTime; // it works trust me
			}
			
			return obj.running = v;
		};
		
		obj.completed = function():Bool {
			if (!obj.exists) {
				return true;
			}
			
			var completed:Bool = obj.timers.length == 0;
			if (completed) {
				obj.running = false;
			}
			
			return completed;
		};
		
		obj.update = function():Void {
			if (!obj.exists || !obj.get_running()) {
				return;
			}
			
			var songPosition:Float = Conductor.get_instance().songPosition;
			if (songPosition < obj.curTime) { // went back in time??
				obj.destroy();
				return;
			}
			
			obj.curTime = songPosition;
			
			for (timer in obj.timers) {
				if (obj.curTime > timer.time + obj.startTime) {
					timer.callback();
					obj.toRemove.push(timer);
				}
			}
			
			while (obj.toRemove.length > 0) {
				obj.timers.remove(obj.toRemove.pop());
			}
			
			if (obj.completed()) {
				obj.destroy();
			}
		};
		
		obj.destroy = function():Void {
			if (!obj.exists) {
				return;
			}
			
			while (!obj.completed()) {
				obj.timers.pop();
			}
			
			obj.running = false;
			
			alive.remove(obj);
			
			toDestroy.remove(obj.destroy);
		};
		
		for (event in events) {
			event.time *= mult * 1000;
			obj.timers.push(event);
		}
		
		obj.set_running(start);
		
		alive.push(obj);
		
		toDestroy.push(obj.destroy);
		
		return obj;
	}
	
	private var alive:Array<SongSequence> = new Array();
	override public function onUpdate(event:UpdateScriptEvent):Void {
		for (obj in alive) {
			obj.update();
		}
	}
	
	private var toDestroy:Array<()->Void> = new Array();
	override public function onDestroy(event:ScriptEvent):Void {
		while (toDestroy.length > 0) {
			toDestroy.pop()();
		}
	}
}