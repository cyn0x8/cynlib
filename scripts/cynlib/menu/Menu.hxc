package cynlib.menu;

import flixel.FlxBasic;
import flixel.math.FlxMath;
import flixel.util.FlxTimer;

import funkin.PlayerSettings;
import funkin.input.Controls;
import funkin.modding.module.ScriptedModule;

/**
 * An object representing a menu.
 */
typedef Menu = {
	/**
	 * Arbitrary custom data attached to the menu.
	 */
	data:Null<Dynamic>,
	
	/**
	 * Arbitrary related container object.
	 */
	container:Null<FlxBasic>,
	
	/**
	 * Whether menu input is enabled.
	 */
	enabled:Bool,
	
	/**
	 * Stops the menu from updating completely.
	 * 
	 * `enabled` is ignored if `true`.
	 */
	frozen:Bool,
	
	selection:Int,
	
	/**
	 * All `MenuItem`s in the menu.
	 * 
	 * Don't push to directly, use `pushItems` instead.
	 */
	items:Array<Dynamic>,
	
	/**
	 * The number of columns in the menu.
	 */
	sizeX:Int,
	
	/**
	 * The number of rows in the menu.
	 */
	sizeY:Int,
	
	/**
	 * Whether the menu should wrap around the X axis.
	 */
	wrapX:Bool,
	
	/**
	 * Whether the menu should wrap around the Y axis.
	 */
	wrapY:Bool,
	
	/**
	 * Arbitrary callback meant to be called when the menu is entered.
	 */
	onEnter:Null<()->Void>,
	
	/**
	 * Arbitrary callback meant to be called when the menu is exited.
	 * 
	 * Should typically be called within `onBack`, but depends on the context.
	 */
	onExit:Null<()->Void>,
	
	/**
	 * Called when the back button is pressed.
	 */
	onBack:Null<()->Void>,
	
	/**
	 * Called every frame.
	 * 
	 * @param elapsed The time elapsed since the last frame in seconds.
	 */
	onUpdate:Null<(Float)->Void>,
	
	/**
	 * Push existing `MenuItem`s to the menu.
	 * 
	 * @param items The items to add in order.
	 * @param autoEnable Whether to automatically enable the items as they're added.
	 */
	pushItems:(Array<Dynamic>, Bool)->Void,
	
	/**
	 * Prevents input for a duration.
	 * 
	 * @param duration The debounce time in seconds.
	 */
	debounce:(Float)->Void,
	
	debounceTimer:Null<FlxTimer>,
	
	update:(Float)->Void,
	
	/**
	 * Whether the menu exists.
	 */
	exists:Bool,
	
	/**
	 * Destroys the menu. Does not destroy the items.
	 */
	destroy:()->Void
}

/**
 * Data for creating a `Menu` object.
 */
typedef MenuData = {
	/**
	 * Arbitrary custom data attached to the menu.
	 */
	data:Null<Dynamic>,
	
	/**
	 * Arbitrary related container object.
	 */
	container:Null<FlxBasic>,
	
	/**
	 * The items to add in order.
	 */
	items:Null<Array>,
	
	/**
	 * Whether to automatically enable the items when the menu is created.
	 */
	autoEnable:Null<Bool>,
	
	/**
	 * The number of columns in the menu.
	 */
	sizeX:Null<Int>,
	
	/**
	 * The number of rows in the menu.
	 */
	sizeY:Null<Int>,
	
	/**
	 * Whether the menu should wrap around the X axis.
	 */
	wrapX:Null<Bool>,
	
	/**
	 * Whether the menu should wrap around the Y axis.
	 */
	wrapY:Null<Bool>,
	
	/**
	 * Arbitrary callback meant to be called when the menu is entered.
	 */
	onEnter:Null<()->Void>,
	
	/**
	 * Arbitrary callback meant to be called when the menu is exited.
	 * 
	 * Should typically be called within `onBack`, but depends on the context.
	 */
	onExit:Null<()->Void>,
	
	/**
	 * Called when the back button is pressed.
	 */
	onBack:Null<()->Void>,
	
	/**
	 * Called every frame.
	 * 
	 * @param elapsed The time elapsed since the last frame in seconds.
	 */
	onUpdate:Null<(Float)->Void>
}

/**
 * Module for creating `Menu` objects.
 */
class Menu extends ScriptedModule {
	public function new() {
		super("cynlib.menu.Menu", -2147483647);
	}
	
	/**
	 * Creates a new `Menu` object.
	 * 
	 * Make sure the total number of items is equal to `sizeX * sizeY`!
	 * 
	 * @param data The `MenuData` to initialize the menu with.
	 * @return The new `Menu` object.
	 */
	public function new_Menu(?data:MenuData):Menu {
		if (data == null) {
			data = {};
		}
		
		var obj:Dynamic = {
			data: data.data == null ? {} : data.data,
			
			container: data.container,
			
			enabled: false,
			frozen: false,
			
			selection: 0,
			prevSelection: 0,
			items: data.items == null ? new Array() : data.items,
			
			wrapX: data.wrapX == null ? true : data.wrapX,
			wrapY: data.wrapY == null ? true : data.wrapY,
			
			onEnter: data.onEnter == null ? function():Void {} : data.onEnter,
			onExit: data.onExit == null ? function():Void {} : data.onExit,
			onBack: data.onBack == null ? function():Void {} : data.onBack,
			
			onUpdate: data.onUpdate == null ? function(elapsed:Float):Void {} : data.onUpdate,
			
			exists: true
		};
		
		if (data.autoEnable == null) {
			data.autoEnable = true;
		}
		
		for (i in 0 ... obj.items.length) {
			var item:Dynamic = obj.items[i];
			
			item.menu = obj;
			if (data.autoEnable) {
				item.enabled = true;
			}
			
			if (i == 0) {
				item.focused = true;
			}
		}
		
		obj.sizeX = Std.int(Math.max(1, data.sizeX == null ? 1 : Math.min(obj.items.length, data.sizeX)));
		
		var maxRows:Int = Std.int(Math.floor(obj.items.length / obj.sizeX));
		obj.sizeY = Std.int(Math.max(1, data.sizeY == null ? maxRows : Math.min(maxRows, data.sizeY)));
		
		obj.pushItems = function(items:Array<Dynamic>, autoEnable:Bool = true):Void {
			if (!obj.exists) {
				return;
			}
			
			for (i in 0 ... items.length) {
				var item:Dynamic = items[i];
				
				if (obj.items.length >= obj.sizeX * obj.sizeY) {
					return;
				}
				
				obj.items.push(item);
				
				item.menu = obj;
				if (autoEnable) {
					item.enabled = true;
				}
				
				if (obj.items.length == 1) {
					item.focused = true;
				}
			}
		};
		
		obj.debounce = function(duration:Float):Void {
			if (duration < 0 || !obj.exists) {
				return;
			}
			
			obj.enabled = false;
			
			if (obj.debounceTimer != null) {
				obj.debounceTimer._timeCounter = 0;
				obj.debounceTimer.time = Math.max(obj.debounceTimer.time, duration);
			} else {
				obj.debounceTimer = new FlxTimer().start(duration, function():Void {
					obj.enabled = true;
					
					obj.debounceTimer = null;
				});
			}
		};
		
		obj.update = function(elapsed:Float):Void {
			if (obj.frozen || !obj.exists) {
				return;
			}
			
			if (obj.enabled) {
				var controls:Controls = PlayerSettings.player1.controls;
				if (controls != null) {
					if (controls.BACK) {
						obj.onBack();
					} else if (obj.items.length > 0) {
						if (controls.check("accept", 2)) { // JUST_PRESSED
							obj.items[obj.selection].onPress();
						} else if (controls.check("accept", -1)) { // JUST_RELEASED
							obj.items[obj.selection].onRelease();
						} else {
							obj.prevSelection = obj.selection;
							var prevItem:Dynamic = obj.items[obj.prevSelection];
							
							var directions:Array<Bool> = [
								controls.UI_LEFT_P,
								controls.UI_DOWN_P,
								controls.UI_UP_P,
								controls.UI_RIGHT_P
							];
							
							if (prevItem.autoNavigate) {
								if (obj.sizeX > 1) {
									var curRow:Int = Std.int(Math.floor(obj.selection / obj.sizeX));
									
									if (directions[0]) {
										obj.selection -= 1;
									}
									
									if (directions[3]) {
										obj.selection += 1;
									}
									
									if (obj.wrapX) {
										obj.selection = curRow * obj.sizeX + (obj.selection + obj.sizeX) % obj.sizeX;
									} else {
										obj.selection = Std.int(FlxMath.bound(obj.selection, curRow * sizeX, (curRow + 1) * sizeX - 1));
									}
								}
								
								if (obj.sizeY > 1) {
									var curColumn:Int = obj.selection % obj.sizeX;
									
									if (directions[2]) {
										obj.selection -= obj.sizeX;
									}
									
									if (directions[1]) {
										obj.selection += obj.sizeX;
									}
									
									if (obj.wrapY) {
										obj.selection = (obj.selection + obj.sizeX * obj.sizeY) % (obj.sizeX * obj.sizeY);
									} else {
										obj.selection = Std.int(FlxMath.bound(obj.selection, curColumn, obj.sizeX * (obj.sizeY - 1) + curColumn));
									}
								}
							}
							
							var directionTrigger:Bool = false;
							for (direction in directions) {
								if (direction) {
									directionTrigger = true;
									break;
								}
							}
							
							if (directionTrigger) {
								prevItem.onDirection(directions);
							}
							
							var curItem:Dynamic = obj.items[obj.selection];
							if (obj.prevSelection != obj.selection) {
								prevItem.focused = false;
								curItem.focused = true;
								
								prevItem.onUnfocus(curItem);
								curItem.onFocus(prevItem);
							}
						}
					}
				}
			}
			
			obj.onUpdate(elapsed);
			
			for (item in obj.items) {
				item.onUpdate(elapsed);
			}
		};
		
		obj.destroy = function():Void {
			if (!obj.exists) {
				return;
			}
			
			if (obj.debounceTimer != null) {
				obj.debounceTimer.cancel();
				obj.debounceTimer.destroy();
				obj.debounceTimer = null;
			}
			
			toDestroy.remove(obj.destroy);
			
			obj.exists = false;
		};
		
		toDestroy.push(obj.destroy);
		
		return obj;
	}
	
	private var toDestroy:Array<()->Void> = new Array();
	override public function onDestroy(event:ScriptEvent):Void {
		while (toDestroy.length > 0) {
			toDestroy.pop()();
		}
	}
}