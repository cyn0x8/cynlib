package cynlib.song;

import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.play.PlayState;
import funkin.play.song.Song;
import funkin.play.stage.Stage;

/**
 * Variables to be shared across song-related scripts.
 */
typedef SongVars = {
	/**
	 * Variables that persist between songs.
	 */
	persist:Dynamic,
	
	/**
	 * The current stage.
	 */
	stage:Null<Stage>,
	
	/**
	 * The current song.
	 */
	song:Null<Song>
	
	// Add your own variables to `songVars` during the callbacks.
}

/**
 * Various callbacks to help set up your song-related scripts.
 */
typedef SongCallbacks = {
	/**
	 * Array of callbacks to be called immediately after `PlayState.create`.
	 * Does not clear between songs.
	 * 
	 * Mainly meant for modules, and runs before `playStateCreatePre` and `playStateCreatePost`.
	 */
	createPersist:Array<(SongVars)->Void>,
	
	/**
	 * Array of callbacks to be called after `createPersist`.
	 * Useful for setting up your stage-specific and song-specific variables and adding them to `songVars`.
	 */
	createPre:Array<(SongVars)->Void>,
	
	/**
	 * Array of callbacks to be called after `createPre`.
	 * Useful for logic that would require cross-script interaction via `songVars`, like sprite z-ordering.
	 */
	createPost:Array<(SongVars)->Void>,
	
	/**
	 * Map of custom callbacks to be called at specific steps in the song.
	 * Make sure to set this before the song starts.
	 */
	events:IntMap<(SongVars)->Void>,
	
	/**
	 * Array of callbacks to be called when the stage is reset.
	 * Your stage script must call `SongHelper.onStageReset` to trigger these.
	 */
	stageReset:Array<(SongVars)->Void>
}

/**
 * Module to make song scripting easier by sharing variables.
 * 
 * Example:
 * ```haxe
 * // Example stage script.
 * // Creates a sprite and adds it to the stage, as well as some example events and hiding the opponent's strumline.
 * package exampleMod.stages;
 * 
 * import flixel.tweens.FlxEase;
 * import flixel.tweens.FlxTween;
 * 
 * import funkin.Conductor;
 * import funkin.graphics.FunkinSprite;
 * import funkin.modding.module.ModuleHandler;
 * import funkin.play.PlayState;
 * import funkin.play.stage.ScriptedStage;
 * 
 * class ExampleStage extends ScriptedStage {
 *     public function new() {
 *         super("exampleMod.exampleStage");
 *     }
 *     
 *     private var songVars:Dynamic = null;
 *     
 *     private var exampleSprite1:FunkinSprite = null;
 *     
 *     override public function onCreate(event:ScriptEvent):Void {
 *         ModuleHandler.getModule("cynlib.song.SongHelper").scriptGet("callbacks").get("createPre").push(function(vars:Dynamic):Void {
 *             songVars = vars;
 *             
 *             exampleSprite1 = new FunkinSprite().makeSolidColor(256, 256, 0xffaabbcc);
 *             songVars.exampleSprite1 = exampleSprite1;
 *             
 *             add(exampleSprite1);
 *             exampleSprite1.zIndex = 100;
 *             
 *             refresh();
 *             
 *             PlayState.instance.opponentStrumline.visible = false;
 *         });
 *         
 *         // Stages can also have their own events!
 *         ModuleHandler.getModule("cynlib.song.SongHelper").scriptGet("callbacks").events = [
 *             62 => function(vars:Dynamic):Void { // 3:3:2
 *                 exampleSprite1.scale.set(0.9, 0.9);
 *             },
 *             
 *             64 => function(vars:Dynamic):Void { // 4:0:0
 *                 exampleSprite1.scale.set(1.1, 1.1);
 *                 FlxTween.tween(exampleSprite1.scale, {x: 1, y: 1}, 0.5, {ease: FlxEase.cubeOut});
 *                 
 *                 ModuleHandler.getModule("cynlib.sequence.SongSequence").scriptCall("new_SongSequence", [[
 *                     {time: 0.5, callback: function():Void {
 *                         songVars.exampleSprite2.visible = false;
 *                     }},
 *                     
 *                     {time: 1, callback: function():Void {
 *                         songVars.exampleSprite2.visible = true;
 *                     }},
 *                     
 *                     {time: 1.5, callback: function():Void {
 *                         songVars.exampleSprite2.visible = false;
 *                     }},
 *                     
 *                     {time: 2, callback: function():Void {
 *                         songVars.exampleSprite2.visible = true;
 *                     }}
 *                 ], Conductor.get_instance().get_beatLengthMs() / 1000]);
 *             }
 *         ];
 *     }
 *     
 *     override public function resetStage():Void {
 *         super.resetStage();
 *         
 *         ModuleHandler.getModule("cynlib.song.SongHelper").scriptCall("onStageReset");
 *     }
 *     
 *     public override function onNoteIncoming(event:NoteScriptEvent):Void {
 *         if (event.note.noteData < 4) {
 *             event.note.visible = false;
 *         }
 *     }
 * }
 * 
 * // Example song script.
 * // Creates a second sprite and uses the first sprite from the stage script.
 * package exampleMod.songs;
 * 
 * import funkin.graphics.FunkinSprite;
 * import funkin.modding.module.ModuleHandler;
 * import funkin.play.song.ScriptedSong;
 * 
 * class ExampleSong extends ScriptedSong {
 *     public function new() {
 *         super("exampleMod.exampleSong");
 *     }
 *     
 *     private var songVars:Dynamic = null;
 *     
 *     private var exampleSprite2:FunkinSprite = null;
 *     
 *     override public function onCreate(event:ScriptEvent):Void {
 *         ModuleHandler.getModule("cynlib.song.SongHelper").scriptGet("callbacks").createPre.push(function(vars:Dynamic):Void {
 *             songVars = vars;            
 *             
 *             exampleSprite2 = new FunkinSprite().makeSolidColor(512, 512, 0xffccbbaa);
 *             songVars.exampleSprite2 = exampleSprite2;
 *         });
 *         
 *         ModuleHandler.getModule("cynlib.song.SongHelper").scriptGet("callbacks").createPost.push(function(vars:Dynamic):Void {
 *             songVars.stage.add(exampleSprite2);
 *             exampleSprite2.zIndex = songVars.exampleSprite1.zIndex + 1;
 *             songVars.stage.refresh();
 *         });
 *         
 *         ModuleHandler.getModule("cynlib.song.SongHelper").scriptGet("callbacks").events = [
 *             32 => function(vars:Dynamic):Void { // 2:0:0
 *                 songVars.exampleSprite2.color = 0xffaabbcc;
 *             }
 *         ];
 *         
 *         ModuleHandler.getModule("cynlib.song.SongHelper").scriptGet("callbacks").stageReset.push(function(vars:Dynamic):Void {
 *             songVars.exampleSprite1.angle = 0;
 *         });
 *     }
 *     
 *     override public function onUpdate(event:UpdateScriptEvent):Void {
 *         if (songVars != null) {
 *             songVars.exampleSprite1.angle += 0.1 * event.elapsed;
 *         }
 *     }
 * }
 * 
 * // Example module script that does some song-related logic.
 * // Uses single-vocals fix and center HUD modules.
 * package exampleMod;
 * 
 * import funkin.modding.module.ModuleHandler;
 * import funkin.modding.module.ScriptedModule;
 * 
 * class ExampleSongHandler extends ScriptedModule {
 *     public function new() {
 *         super("exampleMod.ExampleSongHandler");
 *     }
 *     
 *     private var inExampleModSong:Bool = false;
 *     public var exampleModSongs:Array<String> = [
 *         "exampleMod.exampleSong"
 *     ];
 *     
 *     private var inExampleModStage:Bool = false;
 *     public var exampleModStages:Array<String> = [
 *         "exampleMod.exampleStage"
 *     ];
 *     
 *     override public function onCreate(event:ScriptEvent):Void {
 *         bind();
 *         hook();
 *     }
 *     
 *     private function hook():Void {
 *         ModuleHandler.getModule("cynlib.reloader.Reloader").scriptGet("reloadPre").set("exampleMod.ExampleSongHandler", {
 *             callback: "onReload"
 *         });
 *     }
 *     
 *     public function onReload():Void {
 *         bind();
 *         hook();
 *     }
 *     
 *     private function bind():Void {
 *         ModuleHandler.getModule("cynlib.song.SongHelper").scriptGet("callbacks").createPersist.push(function(vars:Dynamic):Void {
 *             inExampleModSong = exampleModSongs.contains(vars.song.id);
 *             inExampleModStage = exampleModStages.contains(vars.stage.id);
 *             
 *             if (inExampleModSong) {
 *                 ModuleHandler.activateModule("cynlib.song.SingleVocalsFix");
 *             }
 *             
 *             if (inExampleModStage) {
 *                 ModuleHandler.activateModule("cynlib.song.SymmetricStrums");
 *             }
 *         });
 *     }
 *     
 *     override public function onSongEnd(event:ScriptEvent):Void {
 *         if (inExampleModSong) {
 *             ModuleHandler.deactivateModule("cynlib.song.SingleVocalsFix");
 *         }
 *         
 *         if (inExampleModStage) {
 *             ModuleHandler.deactivateModule("cynlib.song.SymmetricStrums");
 *         }
 *         
 *         inExampleModSong = false;
 *         inExampleModStage = false;
 *     }
 * }
 * ```
 */
class SongHelper extends ScriptedModule {
	public function new() {
		super("cynlib.song.SongHelper", -2147483648);
	}
	
	/**
	 * Variables to be shared across song-related scripts.
	 * 
	 * Are also passed to the callbacks.
	 */
	public var songVars:SongVars = null;
	
	/**
	 * Various callbacks to help set up your song-related scripts.
	 */
	public var callbacks:SongCallbacks = {
		createPersist: new Array(),
		createPre: new Array(),
		createPost: new Array(),
		
		events: null,
		
		stageReset: new Array()
	};
	
	/**
	 * Call this function in your stage script to trigger the `stageReset` callbacks.
	 */
	public function onStageReset():Void {
		for (callback in callbacks.stageReset) {
			callback(songVars);
		}
	}
	
	private var completedEvents:Array<Int> = new Array();
	
	override public function onCreate(event:ScriptEvent):Void {
		reset();
		
		hook();
	}
	
	private function hook():Void {
		ModuleHandler.getModule("cynlib.reloader.Reloader").scriptGet("reloadPre").set("cynlib.song.SongHelper", {
			callback: "onReload"
		});
	}
	
	public function onReload():Void {
		reset();
		
		hook();
	}
	
	override public function onStateChangeEnd(event:StateChangeScriptEvent):Void {
		if (Std.isOfType(event.targetState, PlayState)) {
			songVars.song = PlayState.instance.currentSong;
			songVars.stage = PlayState.instance.currentStage;
			
			for (callback in callbacks.createPersist) {
				callback(songVars);
			}
			
			for (callback in callbacks.createPre) {
				callback(songVars);
			}
			
			for (callback in callbacks.createPost) {
				callback(songVars);
			}
		} else {
			reset();
		}
	}
	
	override public function onSubStateOpenEnd(event:SubStateScriptEvent):Void {
		if (Std.isOfType(event.targetState, PlayState) && !PlayState.instance.isMinimalMode) {
			songVars.song = PlayState.instance.currentSong;
			songVars.stage = PlayState.instance.currentStage;
			
			for (callback in callbacks.createPersist) {
				callback(songVars);
			}
			
			for (callback in callbacks.createPre) {
				callback(songVars);
			}
			
			for (callback in callbacks.createPost) {
				callback(songVars);
			}
		}
	}
	
	override public function onStepHit(event:SongTimeScriptEvent):Void {
		if (PlayState.instance == null || PlayState.instance.isMinimalMode || callbacks.events == null) {
			return;
		}
		
		var step:Int = event.step;
		if (callbacks.events.exists(step) && completedEvents.indexOf(step) == -1) {
			callbacks.events.get(step)(songVars);
			completedEvents.push(step);
		}
	}
	
	override public function onSongRetry(event:ScriptEvent):Void {
		completedEvents.resize(0);
	}
	
	private function reset():Void {
		var persist:Dynamic = {};
		if (songVars != null) {
			persist = songVars.persist;
		}
		
		songVars = {
			persist: persist,
			
			stage: null,
			song: null
		};
		
		callbacks.createPre.resize(0);
		callbacks.createPost.resize(0);
		
		callbacks.events = null;
		
		callbacks.stageReset.resize(0);
		
		completedEvents.resize(0);
	}
}